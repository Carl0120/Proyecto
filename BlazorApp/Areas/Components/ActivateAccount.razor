@page "/ActivateAccount"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Security.Models
@using Security.Services;
@using BlazorApp.Components.Account.Shared
@using Microsoft.AspNetCore.Components.Web
@using Radzen.Blazor

@inject UserManager<AppUser> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirmacion de Registro</PageTitle>

<h1>Confirmacion de Registro</h1>

<RadzenText TextStyle="TextStyle.H4">@statusMessage</RadzenText>

@if (User != null)
{
    <div class="text-center mt-4">
        @if (idLockedOut)
        {
            <RadzenText TextStyle="TextStyle.Subtitle2">
                ¿Su cuenta ya ha sido confirmada?
            </RadzenText>
        }
        <RadzenLink Path="@("login")" Text="Iniciar sesión" Style="font-weight: bold;"/>
    </div>
}

@code {
    private string statusMessage = $"Error No se encuentra al usuario especificado";

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery] private string? UserId { get; set; }

    [SupplyParameterFromQuery] private string? Code { get; set; }
    private AppUser? User = null;
    private bool idLockedOut = true;
    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        User = await UserManager.FindByIdAsync(UserId);
        
        if (User is null)
        {
            idLockedOut = await UserManager.IsLockedOutAsync(User);
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
        }
        else
        {
            
            statusMessage =  idLockedOut ? 
                "Su Cuenta ha sido registrada y esta pendiente a confirmacion,\n    Penganse en contacto con el administrador para que confirme su cuenta" 
                :"Su cuenta ya a sido confirmada" ;
        }
    }

}